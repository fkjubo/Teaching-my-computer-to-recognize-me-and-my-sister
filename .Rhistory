history <- model %>%
fit(train,
train.labels,
epochs = 200,
validation_data = c(test, test.labels),
batch_size = 3)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32,
kernel_size = c(3,3),
activation = "relu",
input_shape = c(100,100,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dropout(rate = .1) %>%
layer_conv_2d(filters = 32,
kernel_size = c(2,2),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(1,1)) %>%
layer_dropout(rate = .12) %>%
#layer_conv_2d(filters = 64,
#kernel_size = c(3,3),
#activation = "relu") %>%
#layer_max_pooling_2d(pool_size = c(2,2)) %>%
#layer_dropout(rate = .25) %>%
#layer_conv_2d(filters = 64,
#kernel_size = c(3,3),
#activation = "relu") %>%
#layer_max_pooling_2d(pool_size = c(2,2)) %>%
#layer_dropout(rate = .25) %>%
layer_flatten() %>%
layer_dense(units = 60, activation = "relu") %>%
layer_dropout(rate = .35) %>%
layer_dense(units = 45, activation = "relu") %>%
layer_dropout(rate = .2) %>%
layer_dense(units = 30, activation = "relu") %>%
layer_dropout(rate = .17) %>%
layer_dense(units = 2, activation = "softmax")
# compile the model
model %>%
compile(loss = "binary_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting data
history <- model %>%
fit(train,
train.labels,
epochs = 200,
validation_data = test, test.labels,
batch_size = 3)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32,
kernel_size = c(3,3),
activation = "relu",
input_shape = c(100,100,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dropout(rate = .1) %>%
layer_conv_2d(filters = 32,
kernel_size = c(2,2),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(1,1)) %>%
layer_dropout(rate = .12) %>%
#layer_conv_2d(filters = 64,
#kernel_size = c(3,3),
#activation = "relu") %>%
#layer_max_pooling_2d(pool_size = c(2,2)) %>%
#layer_dropout(rate = .25) %>%
#layer_conv_2d(filters = 64,
#kernel_size = c(3,3),
#activation = "relu") %>%
#layer_max_pooling_2d(pool_size = c(2,2)) %>%
#layer_dropout(rate = .25) %>%
layer_flatten() %>%
layer_dense(units = 60, activation = "relu") %>%
layer_dropout(rate = .35) %>%
layer_dense(units = 45, activation = "relu") %>%
layer_dropout(rate = .2) %>%
layer_dense(units = 30, activation = "relu") %>%
layer_dropout(rate = .17) %>%
layer_dense(units = 2, activation = "softmax")
# compile the model
model %>%
compile(loss = "binary_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting data
history <- model %>%
fit(train,
train.labels,
epochs = 200,
validation_data = (test, test.labels),
batch_size = 3)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32,
kernel_size = c(3,3),
activation = "relu",
input_shape = c(100,100,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dropout(rate = .1) %>%
layer_conv_2d(filters = 32,
kernel_size = c(2,2),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(1,1)) %>%
layer_dropout(rate = .12) %>%
#layer_conv_2d(filters = 64,
#kernel_size = c(3,3),
#activation = "relu") %>%
#layer_max_pooling_2d(pool_size = c(2,2)) %>%
#layer_dropout(rate = .25) %>%
#layer_conv_2d(filters = 64,
#kernel_size = c(3,3),
#activation = "relu") %>%
#layer_max_pooling_2d(pool_size = c(2,2)) %>%
#layer_dropout(rate = .25) %>%
layer_flatten() %>%
layer_dense(units = 60, activation = "relu") %>%
layer_dropout(rate = .35) %>%
layer_dense(units = 45, activation = "relu") %>%
layer_dropout(rate = .2) %>%
layer_dense(units = 30, activation = "relu") %>%
layer_dropout(rate = .17) %>%
layer_dense(units = 2, activation = "softmax")
# compile the model
model %>%
compile(loss = "binary_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting data
history <- model %>%
fit(train,
train.labels,
epochs = 200,
validation_data = None,
batch_size = 3)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32,
kernel_size = c(3,3),
activation = "relu",
input_shape = c(100,100,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dropout(rate = .1) %>%
layer_conv_2d(filters = 32,
kernel_size = c(2,2),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(1,1)) %>%
layer_dropout(rate = .12) %>%
#layer_conv_2d(filters = 64,
#kernel_size = c(3,3),
#activation = "relu") %>%
#layer_max_pooling_2d(pool_size = c(2,2)) %>%
#layer_dropout(rate = .25) %>%
#layer_conv_2d(filters = 64,
#kernel_size = c(3,3),
#activation = "relu") %>%
#layer_max_pooling_2d(pool_size = c(2,2)) %>%
#layer_dropout(rate = .25) %>%
layer_flatten() %>%
layer_dense(units = 60, activation = "relu") %>%
layer_dropout(rate = .35) %>%
layer_dense(units = 45, activation = "relu") %>%
layer_dropout(rate = .2) %>%
layer_dense(units = 30, activation = "relu") %>%
layer_dropout(rate = .17) %>%
layer_dense(units = 2, activation = "softmax")
# compile the model
model %>%
compile(loss = "binary_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting data
history <- model %>%
fit(train,
train.labels,
epochs = 200,
batch_size = 3)
plot(history)
model %>% evaluate(test, test.labels)
predict <- model %>% predict_classes(test)
table(predict, test.labels)
test.labels1 <- c(0,0,0,0,0,0,0,0,0,0,0,0,
1,1,1,1,1,1,1,1,1,1)
table(predict, test.labels1)
predictions <- model %>% predict_classes(test)
table(predictions, test.labels1)
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i, , ]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i, , , ]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
str(test)
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i, , ]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i, ,]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i, ]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i, ]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i, , , ]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i]
img <- t(apply(img, 1, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
par(mfcol=c(5,5))
par(mar=c(0, 0, 1.5, 0), xaxs='i', yaxs='i')
for (i in 1:22) {
img <- test[i]
img <- t(apply(img, 2, rev))
# subtract 1 as labels go from 0 to 9
predicted_label <- which.max(predictions[i, ]) - 1
true_label <- test.labels1[i]
if (predicted_label == true_label) {
color <- '#008800'
} else {
color <- '#bb0000'
}
image(1:22, 1:22, img, col = gray((0:255)/255), xaxt = 'n', yaxt = 'n',
main = paste0(test.labels1[predicted_label + 1], " (",
test.labels1[true_label + 1], ")"),
col.main = color)
}
print(predictions)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32,
kernel_size = c(3,3),
activation = "relu",
input_shape = c(100,100,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dropout(rate = .1) %>%
layer_conv_2d(filters = 32,
kernel_size = c(2,2),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(1,1)) %>%
layer_dropout(rate = .12) %>%
layer_conv_2d(filters = 64,
kernel_size = c(3,3),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dropout(rate = .25) %>%
layer_conv_2d(filters = 64,
kernel_size = c(3,3),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_dropout(rate = .25) %>%
layer_flatten() %>%
layer_dense(units = 60, activation = "relu") %>%
layer_dropout(rate = .35) %>%
layer_dense(units = 45, activation = "relu") %>%
layer_dropout(rate = .2) %>%
layer_dense(units = 30, activation = "relu") %>%
layer_dropout(rate = .17) %>%
layer_dense(units = 2, activation = "softmax")
# compile the model
model %>%
compile(loss = "binary_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting data
history <- model %>%
fit(train,
train.labels,
epochs = 200,
batch_size = 3)
model %>% evaluate(test, test.labels)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32,
kernel_size = c(3,3),
activation = "relu",
input_shape = c(100,100,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = 60, activation = "relu") %>%
layer_dropout(rate = .35) %>%
layer_dense(units = 45, activation = "relu") %>%
layer_dropout(rate = .2) %>%
layer_dense(units = 30, activation = "relu") %>%
layer_dropout(rate = .17) %>%
layer_dense(units = 2, activation = "softmax")
# compile the model
model %>%
compile(loss = "binary_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting data
history <- model %>%
fit(train,
train.labels,
epochs = 200,
batch_size = 3)
model %>% evaluate(test, test.labels)
table(predictions, test.labels1)
predictions
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32,
kernel_size = c(3,3),
activation = "relu",
input_shape = c(100,100,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64,
kernel_size = c(3,3),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = 60, activation = "relu") %>%
layer_dropout(rate = .35) %>%
layer_dense(units = 45, activation = "relu") %>%
layer_dropout(rate = .2) %>%
layer_dense(units = 30, activation = "relu") %>%
layer_dropout(rate = .17) %>%
layer_dense(units = 2, activation = "softmax")
# compile the model
model %>%
compile(loss = "binary_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting data
history <- model %>%
fit(train,
train.labels,
epochs = 200,
batch_size = 3)
model %>% evaluate(test, test.labels)
predictions <- model %>% predict_classes(test)
table(predictions, test.labels1)
model <- keras_model_sequential()
model %>%
layer_conv_2d(filters = 32,
kernel_size = c(3,3),
activation = "relu",
input_shape = c(100,100,3)) %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_conv_2d(filters = 64,
kernel_size = c(3,3),
activation = "relu") %>%
layer_max_pooling_2d(pool_size = c(2,2)) %>%
layer_flatten() %>%
layer_dense(units = 60, activation = "relu") %>%
layer_dropout(rate = .35) %>%
layer_dense(units = 45, activation = "relu") %>%
layer_dropout(rate = .2) %>%
layer_dense(units = 30, activation = "relu") %>%
layer_dropout(rate = .17) %>%
layer_dense(units = 2, activation = "softmax")
# compile the model
model %>%
compile(loss = "binary_crossentropy",
optimizer = "adam",
metrics = "accuracy")
# fitting data
history <- model %>%
fit(train,
train.labels,
epochs = 120,
validation_split = .2,
batch_size = 1)
model %>% evaluate(test, test.labels)
predictions <- model %>% predict_classes(test)
table(predictions, test.labels1)
plot(history)
pic
class(pic)
table(predict = predictions, actual = test.labels1)
plot(history)
